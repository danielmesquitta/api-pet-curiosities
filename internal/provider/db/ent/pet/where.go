// Code generated by ent, DO NOT EDIT.

package pet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldID, id))
}

// Breed applies equality check predicate on the "breed" field. It's identical to BreedEQ.
func Breed(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldBreed, v))
}

// Search applies equality check predicate on the "search" field. It's identical to SearchEQ.
func Search(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldSearch, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldUpdatedAt, v))
}

// SpecieEQ applies the EQ predicate on the "specie" field.
func SpecieEQ(v Specie) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldSpecie, v))
}

// SpecieNEQ applies the NEQ predicate on the "specie" field.
func SpecieNEQ(v Specie) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldSpecie, v))
}

// SpecieIn applies the In predicate on the "specie" field.
func SpecieIn(vs ...Specie) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldSpecie, vs...))
}

// SpecieNotIn applies the NotIn predicate on the "specie" field.
func SpecieNotIn(vs ...Specie) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldSpecie, vs...))
}

// BreedEQ applies the EQ predicate on the "breed" field.
func BreedEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldBreed, v))
}

// BreedNEQ applies the NEQ predicate on the "breed" field.
func BreedNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldBreed, v))
}

// BreedIn applies the In predicate on the "breed" field.
func BreedIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldBreed, vs...))
}

// BreedNotIn applies the NotIn predicate on the "breed" field.
func BreedNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldBreed, vs...))
}

// BreedGT applies the GT predicate on the "breed" field.
func BreedGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldBreed, v))
}

// BreedGTE applies the GTE predicate on the "breed" field.
func BreedGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldBreed, v))
}

// BreedLT applies the LT predicate on the "breed" field.
func BreedLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldBreed, v))
}

// BreedLTE applies the LTE predicate on the "breed" field.
func BreedLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldBreed, v))
}

// BreedContains applies the Contains predicate on the "breed" field.
func BreedContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldBreed, v))
}

// BreedHasPrefix applies the HasPrefix predicate on the "breed" field.
func BreedHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldBreed, v))
}

// BreedHasSuffix applies the HasSuffix predicate on the "breed" field.
func BreedHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldBreed, v))
}

// BreedEqualFold applies the EqualFold predicate on the "breed" field.
func BreedEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldBreed, v))
}

// BreedContainsFold applies the ContainsFold predicate on the "breed" field.
func BreedContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldBreed, v))
}

// SearchEQ applies the EQ predicate on the "search" field.
func SearchEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldSearch, v))
}

// SearchNEQ applies the NEQ predicate on the "search" field.
func SearchNEQ(v string) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldSearch, v))
}

// SearchIn applies the In predicate on the "search" field.
func SearchIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldSearch, vs...))
}

// SearchNotIn applies the NotIn predicate on the "search" field.
func SearchNotIn(vs ...string) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldSearch, vs...))
}

// SearchGT applies the GT predicate on the "search" field.
func SearchGT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldSearch, v))
}

// SearchGTE applies the GTE predicate on the "search" field.
func SearchGTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldSearch, v))
}

// SearchLT applies the LT predicate on the "search" field.
func SearchLT(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldSearch, v))
}

// SearchLTE applies the LTE predicate on the "search" field.
func SearchLTE(v string) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldSearch, v))
}

// SearchContains applies the Contains predicate on the "search" field.
func SearchContains(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContains(FieldSearch, v))
}

// SearchHasPrefix applies the HasPrefix predicate on the "search" field.
func SearchHasPrefix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasPrefix(FieldSearch, v))
}

// SearchHasSuffix applies the HasSuffix predicate on the "search" field.
func SearchHasSuffix(v string) predicate.Pet {
	return predicate.Pet(sql.FieldHasSuffix(FieldSearch, v))
}

// SearchEqualFold applies the EqualFold predicate on the "search" field.
func SearchEqualFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldEqualFold(FieldSearch, v))
}

// SearchContainsFold applies the ContainsFold predicate on the "search" field.
func SearchContainsFold(v string) predicate.Pet {
	return predicate.Pet(sql.FieldContainsFold(FieldSearch, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Pet {
	return predicate.Pet(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCuriosities applies the HasEdge predicate on the "curiosities" edge.
func HasCuriosities() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CuriositiesTable, CuriositiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCuriositiesWith applies the HasEdge predicate on the "curiosities" edge with a given conditions (other predicates).
func HasCuriositiesWith(preds ...predicate.Curiosity) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := newCuriositiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwners applies the HasEdge predicate on the "owners" edge.
func HasOwners() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnersTable, OwnersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnersWith applies the HasEdge predicate on the "owners" edge with a given conditions (other predicates).
func HasOwnersWith(preds ...predicate.User) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := newOwnersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pet) predicate.Pet {
	return predicate.Pet(sql.NotPredicates(p))
}
