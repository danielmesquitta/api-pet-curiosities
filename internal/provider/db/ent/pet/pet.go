// Code generated by ent, DO NOT EDIT.

package pet

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the pet type in the database.
	Label = "pet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSpecie holds the string denoting the specie field in the database.
	FieldSpecie = "specie"
	// FieldBreed holds the string denoting the breed field in the database.
	FieldBreed = "breed"
	// FieldSearch holds the string denoting the search field in the database.
	FieldSearch = "search"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCuriosities holds the string denoting the curiosities edge name in mutations.
	EdgeCuriosities = "curiosities"
	// EdgeOwners holds the string denoting the owners edge name in mutations.
	EdgeOwners = "owners"
	// Table holds the table name of the pet in the database.
	Table = "pets"
	// CuriositiesTable is the table that holds the curiosities relation/edge.
	CuriositiesTable = "curiosities"
	// CuriositiesInverseTable is the table name for the Curiosity entity.
	// It exists in this package in order to avoid circular dependency with the "curiosity" package.
	CuriositiesInverseTable = "curiosities"
	// CuriositiesColumn is the table column denoting the curiosities relation/edge.
	CuriositiesColumn = "pet_id"
	// OwnersTable is the table that holds the owners relation/edge. The primary key declared below.
	OwnersTable = "user_pets"
	// OwnersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnersInverseTable = "users"
)

// Columns holds all SQL columns for pet fields.
var Columns = []string{
	FieldID,
	FieldSpecie,
	FieldBreed,
	FieldSearch,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// OwnersPrimaryKey and OwnersColumn2 are the table columns denoting the
	// primary key for the owners relation (M2M).
	OwnersPrimaryKey = []string{"user_id", "pet_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BreedValidator is a validator for the "breed" field. It is called by the builders before save.
	BreedValidator func(string) error
	// SearchValidator is a validator for the "search" field. It is called by the builders before save.
	SearchValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Specie defines the type for the "specie" enum field.
type Specie string

// Specie values.
const (
	SpecieDOG Specie = "DOG"
	SpecieCAT Specie = "CAT"
)

func (s Specie) String() string {
	return string(s)
}

// SpecieValidator is a validator for the "specie" field enum values. It is called by the builders before save.
func SpecieValidator(s Specie) error {
	switch s {
	case SpecieDOG, SpecieCAT:
		return nil
	default:
		return fmt.Errorf("pet: invalid enum value for specie field: %q", s)
	}
}

// OrderOption defines the ordering options for the Pet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySpecie orders the results by the specie field.
func BySpecie(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecie, opts...).ToFunc()
}

// ByBreed orders the results by the breed field.
func ByBreed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBreed, opts...).ToFunc()
}

// BySearch orders the results by the search field.
func BySearch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSearch, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCuriositiesCount orders the results by curiosities count.
func ByCuriositiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCuriositiesStep(), opts...)
	}
}

// ByCuriosities orders the results by curiosities terms.
func ByCuriosities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCuriositiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnersCount orders the results by owners count.
func ByOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnersStep(), opts...)
	}
}

// ByOwners orders the results by owners terms.
func ByOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCuriositiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CuriositiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CuriositiesTable, CuriositiesColumn),
	)
}
func newOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OwnersTable, OwnersPrimaryKey...),
	)
}
