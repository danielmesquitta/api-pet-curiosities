// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/curiosity"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/user"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/usercuriosity"
	"github.com/google/uuid"
)

// UserCuriosityCreate is the builder for creating a UserCuriosity entity.
type UserCuriosityCreate struct {
	config
	mutation *UserCuriosityMutation
	hooks    []Hook
}

// SetViewed sets the "viewed" field.
func (ucc *UserCuriosityCreate) SetViewed(b bool) *UserCuriosityCreate {
	ucc.mutation.SetViewed(b)
	return ucc
}

// SetNillableViewed sets the "viewed" field if the given value is not nil.
func (ucc *UserCuriosityCreate) SetNillableViewed(b *bool) *UserCuriosityCreate {
	if b != nil {
		ucc.SetViewed(*b)
	}
	return ucc
}

// SetLiked sets the "liked" field.
func (ucc *UserCuriosityCreate) SetLiked(b bool) *UserCuriosityCreate {
	ucc.mutation.SetLiked(b)
	return ucc
}

// SetNillableLiked sets the "liked" field if the given value is not nil.
func (ucc *UserCuriosityCreate) SetNillableLiked(b *bool) *UserCuriosityCreate {
	if b != nil {
		ucc.SetLiked(*b)
	}
	return ucc
}

// SetCreatedAt sets the "created_at" field.
func (ucc *UserCuriosityCreate) SetCreatedAt(t time.Time) *UserCuriosityCreate {
	ucc.mutation.SetCreatedAt(t)
	return ucc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ucc *UserCuriosityCreate) SetNillableCreatedAt(t *time.Time) *UserCuriosityCreate {
	if t != nil {
		ucc.SetCreatedAt(*t)
	}
	return ucc
}

// SetID sets the "id" field.
func (ucc *UserCuriosityCreate) SetID(u uuid.UUID) *UserCuriosityCreate {
	ucc.mutation.SetID(u)
	return ucc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ucc *UserCuriosityCreate) SetNillableID(u *uuid.UUID) *UserCuriosityCreate {
	if u != nil {
		ucc.SetID(*u)
	}
	return ucc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ucc *UserCuriosityCreate) SetUserID(id uuid.UUID) *UserCuriosityCreate {
	ucc.mutation.SetUserID(id)
	return ucc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ucc *UserCuriosityCreate) SetNillableUserID(id *uuid.UUID) *UserCuriosityCreate {
	if id != nil {
		ucc = ucc.SetUserID(*id)
	}
	return ucc
}

// SetUser sets the "user" edge to the User entity.
func (ucc *UserCuriosityCreate) SetUser(u *User) *UserCuriosityCreate {
	return ucc.SetUserID(u.ID)
}

// SetCuriosityID sets the "curiosity" edge to the Curiosity entity by ID.
func (ucc *UserCuriosityCreate) SetCuriosityID(id uuid.UUID) *UserCuriosityCreate {
	ucc.mutation.SetCuriosityID(id)
	return ucc
}

// SetNillableCuriosityID sets the "curiosity" edge to the Curiosity entity by ID if the given value is not nil.
func (ucc *UserCuriosityCreate) SetNillableCuriosityID(id *uuid.UUID) *UserCuriosityCreate {
	if id != nil {
		ucc = ucc.SetCuriosityID(*id)
	}
	return ucc
}

// SetCuriosity sets the "curiosity" edge to the Curiosity entity.
func (ucc *UserCuriosityCreate) SetCuriosity(c *Curiosity) *UserCuriosityCreate {
	return ucc.SetCuriosityID(c.ID)
}

// Mutation returns the UserCuriosityMutation object of the builder.
func (ucc *UserCuriosityCreate) Mutation() *UserCuriosityMutation {
	return ucc.mutation
}

// Save creates the UserCuriosity in the database.
func (ucc *UserCuriosityCreate) Save(ctx context.Context) (*UserCuriosity, error) {
	ucc.defaults()
	return withHooks(ctx, ucc.sqlSave, ucc.mutation, ucc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserCuriosityCreate) SaveX(ctx context.Context) *UserCuriosity {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserCuriosityCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserCuriosityCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucc *UserCuriosityCreate) defaults() {
	if _, ok := ucc.mutation.Viewed(); !ok {
		v := usercuriosity.DefaultViewed
		ucc.mutation.SetViewed(v)
	}
	if _, ok := ucc.mutation.Liked(); !ok {
		v := usercuriosity.DefaultLiked
		ucc.mutation.SetLiked(v)
	}
	if _, ok := ucc.mutation.CreatedAt(); !ok {
		v := usercuriosity.DefaultCreatedAt()
		ucc.mutation.SetCreatedAt(v)
	}
	if _, ok := ucc.mutation.ID(); !ok {
		v := usercuriosity.DefaultID()
		ucc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserCuriosityCreate) check() error {
	if _, ok := ucc.mutation.Viewed(); !ok {
		return &ValidationError{Name: "viewed", err: errors.New(`ent: missing required field "UserCuriosity.viewed"`)}
	}
	if _, ok := ucc.mutation.Liked(); !ok {
		return &ValidationError{Name: "liked", err: errors.New(`ent: missing required field "UserCuriosity.liked"`)}
	}
	if _, ok := ucc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserCuriosity.created_at"`)}
	}
	return nil
}

func (ucc *UserCuriosityCreate) sqlSave(ctx context.Context) (*UserCuriosity, error) {
	if err := ucc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ucc.mutation.id = &_node.ID
	ucc.mutation.done = true
	return _node, nil
}

func (ucc *UserCuriosityCreate) createSpec() (*UserCuriosity, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCuriosity{config: ucc.config}
		_spec = sqlgraph.NewCreateSpec(usercuriosity.Table, sqlgraph.NewFieldSpec(usercuriosity.FieldID, field.TypeUUID))
	)
	if id, ok := ucc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ucc.mutation.Viewed(); ok {
		_spec.SetField(usercuriosity.FieldViewed, field.TypeBool, value)
		_node.Viewed = value
	}
	if value, ok := ucc.mutation.Liked(); ok {
		_spec.SetField(usercuriosity.FieldLiked, field.TypeBool, value)
		_node.Liked = value
	}
	if value, ok := ucc.mutation.CreatedAt(); ok {
		_spec.SetField(usercuriosity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ucc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.UserTable,
			Columns: []string{usercuriosity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ucc.mutation.CuriosityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.CuriosityTable,
			Columns: []string{usercuriosity.CuriosityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.curiosity_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCuriosityCreateBulk is the builder for creating many UserCuriosity entities in bulk.
type UserCuriosityCreateBulk struct {
	config
	err      error
	builders []*UserCuriosityCreate
}

// Save creates the UserCuriosity entities in the database.
func (uccb *UserCuriosityCreateBulk) Save(ctx context.Context) ([]*UserCuriosity, error) {
	if uccb.err != nil {
		return nil, uccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserCuriosity, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCuriosityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserCuriosityCreateBulk) SaveX(ctx context.Context) []*UserCuriosity {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserCuriosityCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserCuriosityCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}
