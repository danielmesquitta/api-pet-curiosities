// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/curiosity"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/predicate"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/user"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/usercuriosity"
	"github.com/google/uuid"
)

// UserCuriosityUpdate is the builder for updating UserCuriosity entities.
type UserCuriosityUpdate struct {
	config
	hooks    []Hook
	mutation *UserCuriosityMutation
}

// Where appends a list predicates to the UserCuriosityUpdate builder.
func (ucu *UserCuriosityUpdate) Where(ps ...predicate.UserCuriosity) *UserCuriosityUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetViewed sets the "viewed" field.
func (ucu *UserCuriosityUpdate) SetViewed(b bool) *UserCuriosityUpdate {
	ucu.mutation.SetViewed(b)
	return ucu
}

// SetNillableViewed sets the "viewed" field if the given value is not nil.
func (ucu *UserCuriosityUpdate) SetNillableViewed(b *bool) *UserCuriosityUpdate {
	if b != nil {
		ucu.SetViewed(*b)
	}
	return ucu
}

// SetLiked sets the "liked" field.
func (ucu *UserCuriosityUpdate) SetLiked(b bool) *UserCuriosityUpdate {
	ucu.mutation.SetLiked(b)
	return ucu
}

// SetNillableLiked sets the "liked" field if the given value is not nil.
func (ucu *UserCuriosityUpdate) SetNillableLiked(b *bool) *UserCuriosityUpdate {
	if b != nil {
		ucu.SetLiked(*b)
	}
	return ucu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ucu *UserCuriosityUpdate) SetUserID(id uuid.UUID) *UserCuriosityUpdate {
	ucu.mutation.SetUserID(id)
	return ucu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ucu *UserCuriosityUpdate) SetNillableUserID(id *uuid.UUID) *UserCuriosityUpdate {
	if id != nil {
		ucu = ucu.SetUserID(*id)
	}
	return ucu
}

// SetUser sets the "user" edge to the User entity.
func (ucu *UserCuriosityUpdate) SetUser(u *User) *UserCuriosityUpdate {
	return ucu.SetUserID(u.ID)
}

// SetCuriosityID sets the "curiosity" edge to the Curiosity entity by ID.
func (ucu *UserCuriosityUpdate) SetCuriosityID(id uuid.UUID) *UserCuriosityUpdate {
	ucu.mutation.SetCuriosityID(id)
	return ucu
}

// SetNillableCuriosityID sets the "curiosity" edge to the Curiosity entity by ID if the given value is not nil.
func (ucu *UserCuriosityUpdate) SetNillableCuriosityID(id *uuid.UUID) *UserCuriosityUpdate {
	if id != nil {
		ucu = ucu.SetCuriosityID(*id)
	}
	return ucu
}

// SetCuriosity sets the "curiosity" edge to the Curiosity entity.
func (ucu *UserCuriosityUpdate) SetCuriosity(c *Curiosity) *UserCuriosityUpdate {
	return ucu.SetCuriosityID(c.ID)
}

// Mutation returns the UserCuriosityMutation object of the builder.
func (ucu *UserCuriosityUpdate) Mutation() *UserCuriosityMutation {
	return ucu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ucu *UserCuriosityUpdate) ClearUser() *UserCuriosityUpdate {
	ucu.mutation.ClearUser()
	return ucu
}

// ClearCuriosity clears the "curiosity" edge to the Curiosity entity.
func (ucu *UserCuriosityUpdate) ClearCuriosity() *UserCuriosityUpdate {
	ucu.mutation.ClearCuriosity()
	return ucu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserCuriosityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucu.sqlSave, ucu.mutation, ucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserCuriosityUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserCuriosityUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserCuriosityUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucu *UserCuriosityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usercuriosity.Table, usercuriosity.Columns, sqlgraph.NewFieldSpec(usercuriosity.FieldID, field.TypeUUID))
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.Viewed(); ok {
		_spec.SetField(usercuriosity.FieldViewed, field.TypeBool, value)
	}
	if value, ok := ucu.mutation.Liked(); ok {
		_spec.SetField(usercuriosity.FieldLiked, field.TypeBool, value)
	}
	if ucu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.UserTable,
			Columns: []string{usercuriosity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.UserTable,
			Columns: []string{usercuriosity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucu.mutation.CuriosityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.CuriosityTable,
			Columns: []string{usercuriosity.CuriosityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.CuriosityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.CuriosityTable,
			Columns: []string{usercuriosity.CuriosityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercuriosity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucu.mutation.done = true
	return n, nil
}

// UserCuriosityUpdateOne is the builder for updating a single UserCuriosity entity.
type UserCuriosityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserCuriosityMutation
}

// SetViewed sets the "viewed" field.
func (ucuo *UserCuriosityUpdateOne) SetViewed(b bool) *UserCuriosityUpdateOne {
	ucuo.mutation.SetViewed(b)
	return ucuo
}

// SetNillableViewed sets the "viewed" field if the given value is not nil.
func (ucuo *UserCuriosityUpdateOne) SetNillableViewed(b *bool) *UserCuriosityUpdateOne {
	if b != nil {
		ucuo.SetViewed(*b)
	}
	return ucuo
}

// SetLiked sets the "liked" field.
func (ucuo *UserCuriosityUpdateOne) SetLiked(b bool) *UserCuriosityUpdateOne {
	ucuo.mutation.SetLiked(b)
	return ucuo
}

// SetNillableLiked sets the "liked" field if the given value is not nil.
func (ucuo *UserCuriosityUpdateOne) SetNillableLiked(b *bool) *UserCuriosityUpdateOne {
	if b != nil {
		ucuo.SetLiked(*b)
	}
	return ucuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ucuo *UserCuriosityUpdateOne) SetUserID(id uuid.UUID) *UserCuriosityUpdateOne {
	ucuo.mutation.SetUserID(id)
	return ucuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ucuo *UserCuriosityUpdateOne) SetNillableUserID(id *uuid.UUID) *UserCuriosityUpdateOne {
	if id != nil {
		ucuo = ucuo.SetUserID(*id)
	}
	return ucuo
}

// SetUser sets the "user" edge to the User entity.
func (ucuo *UserCuriosityUpdateOne) SetUser(u *User) *UserCuriosityUpdateOne {
	return ucuo.SetUserID(u.ID)
}

// SetCuriosityID sets the "curiosity" edge to the Curiosity entity by ID.
func (ucuo *UserCuriosityUpdateOne) SetCuriosityID(id uuid.UUID) *UserCuriosityUpdateOne {
	ucuo.mutation.SetCuriosityID(id)
	return ucuo
}

// SetNillableCuriosityID sets the "curiosity" edge to the Curiosity entity by ID if the given value is not nil.
func (ucuo *UserCuriosityUpdateOne) SetNillableCuriosityID(id *uuid.UUID) *UserCuriosityUpdateOne {
	if id != nil {
		ucuo = ucuo.SetCuriosityID(*id)
	}
	return ucuo
}

// SetCuriosity sets the "curiosity" edge to the Curiosity entity.
func (ucuo *UserCuriosityUpdateOne) SetCuriosity(c *Curiosity) *UserCuriosityUpdateOne {
	return ucuo.SetCuriosityID(c.ID)
}

// Mutation returns the UserCuriosityMutation object of the builder.
func (ucuo *UserCuriosityUpdateOne) Mutation() *UserCuriosityMutation {
	return ucuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ucuo *UserCuriosityUpdateOne) ClearUser() *UserCuriosityUpdateOne {
	ucuo.mutation.ClearUser()
	return ucuo
}

// ClearCuriosity clears the "curiosity" edge to the Curiosity entity.
func (ucuo *UserCuriosityUpdateOne) ClearCuriosity() *UserCuriosityUpdateOne {
	ucuo.mutation.ClearCuriosity()
	return ucuo
}

// Where appends a list predicates to the UserCuriosityUpdate builder.
func (ucuo *UserCuriosityUpdateOne) Where(ps ...predicate.UserCuriosity) *UserCuriosityUpdateOne {
	ucuo.mutation.Where(ps...)
	return ucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserCuriosityUpdateOne) Select(field string, fields ...string) *UserCuriosityUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserCuriosity entity.
func (ucuo *UserCuriosityUpdateOne) Save(ctx context.Context) (*UserCuriosity, error) {
	return withHooks(ctx, ucuo.sqlSave, ucuo.mutation, ucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserCuriosityUpdateOne) SaveX(ctx context.Context) *UserCuriosity {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserCuriosityUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserCuriosityUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucuo *UserCuriosityUpdateOne) sqlSave(ctx context.Context) (_node *UserCuriosity, err error) {
	_spec := sqlgraph.NewUpdateSpec(usercuriosity.Table, usercuriosity.Columns, sqlgraph.NewFieldSpec(usercuriosity.FieldID, field.TypeUUID))
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserCuriosity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercuriosity.FieldID)
		for _, f := range fields {
			if !usercuriosity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usercuriosity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.Viewed(); ok {
		_spec.SetField(usercuriosity.FieldViewed, field.TypeBool, value)
	}
	if value, ok := ucuo.mutation.Liked(); ok {
		_spec.SetField(usercuriosity.FieldLiked, field.TypeBool, value)
	}
	if ucuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.UserTable,
			Columns: []string{usercuriosity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.UserTable,
			Columns: []string{usercuriosity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucuo.mutation.CuriosityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.CuriosityTable,
			Columns: []string{usercuriosity.CuriosityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.CuriosityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercuriosity.CuriosityTable,
			Columns: []string{usercuriosity.CuriosityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserCuriosity{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercuriosity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucuo.mutation.done = true
	return _node, nil
}
