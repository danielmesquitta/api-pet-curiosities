// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/curiosity"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/predicate"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/user"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/view"
	"github.com/google/uuid"
)

// ViewUpdate is the builder for updating View entities.
type ViewUpdate struct {
	config
	hooks    []Hook
	mutation *ViewMutation
}

// Where appends a list predicates to the ViewUpdate builder.
func (vu *ViewUpdate) Where(ps ...predicate.View) *ViewUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vu *ViewUpdate) SetUserID(id uuid.UUID) *ViewUpdate {
	vu.mutation.SetUserID(id)
	return vu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vu *ViewUpdate) SetNillableUserID(id *uuid.UUID) *ViewUpdate {
	if id != nil {
		vu = vu.SetUserID(*id)
	}
	return vu
}

// SetUser sets the "user" edge to the User entity.
func (vu *ViewUpdate) SetUser(u *User) *ViewUpdate {
	return vu.SetUserID(u.ID)
}

// SetCuriosityID sets the "curiosity" edge to the Curiosity entity by ID.
func (vu *ViewUpdate) SetCuriosityID(id uuid.UUID) *ViewUpdate {
	vu.mutation.SetCuriosityID(id)
	return vu
}

// SetNillableCuriosityID sets the "curiosity" edge to the Curiosity entity by ID if the given value is not nil.
func (vu *ViewUpdate) SetNillableCuriosityID(id *uuid.UUID) *ViewUpdate {
	if id != nil {
		vu = vu.SetCuriosityID(*id)
	}
	return vu
}

// SetCuriosity sets the "curiosity" edge to the Curiosity entity.
func (vu *ViewUpdate) SetCuriosity(c *Curiosity) *ViewUpdate {
	return vu.SetCuriosityID(c.ID)
}

// Mutation returns the ViewMutation object of the builder.
func (vu *ViewUpdate) Mutation() *ViewMutation {
	return vu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vu *ViewUpdate) ClearUser() *ViewUpdate {
	vu.mutation.ClearUser()
	return vu
}

// ClearCuriosity clears the "curiosity" edge to the Curiosity entity.
func (vu *ViewUpdate) ClearCuriosity() *ViewUpdate {
	vu.mutation.ClearCuriosity()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *ViewUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *ViewUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *ViewUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *ViewUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *ViewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(view.Table, view.Columns, sqlgraph.NewFieldSpec(view.FieldID, field.TypeUUID))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   view.UserTable,
			Columns: []string{view.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   view.UserTable,
			Columns: []string{view.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.CuriosityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   view.CuriosityTable,
			Columns: []string{view.CuriosityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.CuriosityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   view.CuriosityTable,
			Columns: []string{view.CuriosityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{view.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// ViewUpdateOne is the builder for updating a single View entity.
type ViewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ViewMutation
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vuo *ViewUpdateOne) SetUserID(id uuid.UUID) *ViewUpdateOne {
	vuo.mutation.SetUserID(id)
	return vuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vuo *ViewUpdateOne) SetNillableUserID(id *uuid.UUID) *ViewUpdateOne {
	if id != nil {
		vuo = vuo.SetUserID(*id)
	}
	return vuo
}

// SetUser sets the "user" edge to the User entity.
func (vuo *ViewUpdateOne) SetUser(u *User) *ViewUpdateOne {
	return vuo.SetUserID(u.ID)
}

// SetCuriosityID sets the "curiosity" edge to the Curiosity entity by ID.
func (vuo *ViewUpdateOne) SetCuriosityID(id uuid.UUID) *ViewUpdateOne {
	vuo.mutation.SetCuriosityID(id)
	return vuo
}

// SetNillableCuriosityID sets the "curiosity" edge to the Curiosity entity by ID if the given value is not nil.
func (vuo *ViewUpdateOne) SetNillableCuriosityID(id *uuid.UUID) *ViewUpdateOne {
	if id != nil {
		vuo = vuo.SetCuriosityID(*id)
	}
	return vuo
}

// SetCuriosity sets the "curiosity" edge to the Curiosity entity.
func (vuo *ViewUpdateOne) SetCuriosity(c *Curiosity) *ViewUpdateOne {
	return vuo.SetCuriosityID(c.ID)
}

// Mutation returns the ViewMutation object of the builder.
func (vuo *ViewUpdateOne) Mutation() *ViewMutation {
	return vuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vuo *ViewUpdateOne) ClearUser() *ViewUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// ClearCuriosity clears the "curiosity" edge to the Curiosity entity.
func (vuo *ViewUpdateOne) ClearCuriosity() *ViewUpdateOne {
	vuo.mutation.ClearCuriosity()
	return vuo
}

// Where appends a list predicates to the ViewUpdate builder.
func (vuo *ViewUpdateOne) Where(ps ...predicate.View) *ViewUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *ViewUpdateOne) Select(field string, fields ...string) *ViewUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated View entity.
func (vuo *ViewUpdateOne) Save(ctx context.Context) (*View, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *ViewUpdateOne) SaveX(ctx context.Context) *View {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *ViewUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *ViewUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *ViewUpdateOne) sqlSave(ctx context.Context) (_node *View, err error) {
	_spec := sqlgraph.NewUpdateSpec(view.Table, view.Columns, sqlgraph.NewFieldSpec(view.FieldID, field.TypeUUID))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "View.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, view.FieldID)
		for _, f := range fields {
			if !view.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != view.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   view.UserTable,
			Columns: []string{view.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   view.UserTable,
			Columns: []string{view.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.CuriosityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   view.CuriosityTable,
			Columns: []string{view.CuriosityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.CuriosityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   view.CuriosityTable,
			Columns: []string{view.CuriosityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &View{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{view.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
