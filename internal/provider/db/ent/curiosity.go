// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/curiosity"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/pet"
	"github.com/google/uuid"
)

// Curiosity is the model entity for the Curiosity schema.
type Curiosity struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CuriosityQuery when eager-loading is set.
	Edges        CuriosityEdges `json:"edges"`
	pet_id       *uuid.UUID
	selectValues sql.SelectValues
}

// CuriosityEdges holds the relations/edges for other nodes in the graph.
type CuriosityEdges struct {
	// Pet holds the value of the pet edge.
	Pet *Pet `json:"pet,omitempty"`
	// UserCuriosities holds the value of the user_curiosities edge.
	UserCuriosities []*UserCuriosity `json:"user_curiosities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PetOrErr returns the Pet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CuriosityEdges) PetOrErr() (*Pet, error) {
	if e.Pet != nil {
		return e.Pet, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "pet"}
}

// UserCuriositiesOrErr returns the UserCuriosities value or an error if the edge
// was not loaded in eager-loading.
func (e CuriosityEdges) UserCuriositiesOrErr() ([]*UserCuriosity, error) {
	if e.loadedTypes[1] {
		return e.UserCuriosities, nil
	}
	return nil, &NotLoadedError{edge: "user_curiosities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Curiosity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case curiosity.FieldTitle, curiosity.FieldContent:
			values[i] = new(sql.NullString)
		case curiosity.FieldCreatedAt, curiosity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case curiosity.FieldID:
			values[i] = new(uuid.UUID)
		case curiosity.ForeignKeys[0]: // pet_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Curiosity fields.
func (c *Curiosity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case curiosity.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case curiosity.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case curiosity.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case curiosity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case curiosity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case curiosity.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field pet_id", values[i])
			} else if value.Valid {
				c.pet_id = new(uuid.UUID)
				*c.pet_id = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Curiosity.
// This includes values selected through modifiers, order, etc.
func (c *Curiosity) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryPet queries the "pet" edge of the Curiosity entity.
func (c *Curiosity) QueryPet() *PetQuery {
	return NewCuriosityClient(c.config).QueryPet(c)
}

// QueryUserCuriosities queries the "user_curiosities" edge of the Curiosity entity.
func (c *Curiosity) QueryUserCuriosities() *UserCuriosityQuery {
	return NewCuriosityClient(c.config).QueryUserCuriosities(c)
}

// Update returns a builder for updating this Curiosity.
// Note that you need to call Curiosity.Unwrap() before calling this method if this Curiosity
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Curiosity) Update() *CuriosityUpdateOne {
	return NewCuriosityClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Curiosity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Curiosity) Unwrap() *Curiosity {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Curiosity is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Curiosity) String() string {
	var builder strings.Builder
	builder.WriteString("Curiosity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(c.Content)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Curiosities is a parsable slice of Curiosity.
type Curiosities []*Curiosity
