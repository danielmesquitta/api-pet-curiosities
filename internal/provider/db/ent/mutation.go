// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/curiosity"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/pet"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/predicate"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/user"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/usercuriosity"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCuriosity     = "Curiosity"
	TypePet           = "Pet"
	TypeUser          = "User"
	TypeUserCuriosity = "UserCuriosity"
)

// CuriosityMutation represents an operation that mutates the Curiosity nodes in the graph.
type CuriosityMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	title                   *string
	content                 *string
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	pet                     *uuid.UUID
	clearedpet              bool
	user_curiosities        map[uuid.UUID]struct{}
	removeduser_curiosities map[uuid.UUID]struct{}
	cleareduser_curiosities bool
	done                    bool
	oldValue                func(context.Context) (*Curiosity, error)
	predicates              []predicate.Curiosity
}

var _ ent.Mutation = (*CuriosityMutation)(nil)

// curiosityOption allows management of the mutation configuration using functional options.
type curiosityOption func(*CuriosityMutation)

// newCuriosityMutation creates new mutation for the Curiosity entity.
func newCuriosityMutation(c config, op Op, opts ...curiosityOption) *CuriosityMutation {
	m := &CuriosityMutation{
		config:        c,
		op:            op,
		typ:           TypeCuriosity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCuriosityID sets the ID field of the mutation.
func withCuriosityID(id uuid.UUID) curiosityOption {
	return func(m *CuriosityMutation) {
		var (
			err   error
			once  sync.Once
			value *Curiosity
		)
		m.oldValue = func(ctx context.Context) (*Curiosity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Curiosity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCuriosity sets the old Curiosity of the mutation.
func withCuriosity(node *Curiosity) curiosityOption {
	return func(m *CuriosityMutation) {
		m.oldValue = func(context.Context) (*Curiosity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CuriosityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CuriosityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Curiosity entities.
func (m *CuriosityMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CuriosityMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CuriosityMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Curiosity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *CuriosityMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *CuriosityMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Curiosity entity.
// If the Curiosity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CuriosityMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *CuriosityMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the "content" field.
func (m *CuriosityMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *CuriosityMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Curiosity entity.
// If the Curiosity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CuriosityMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *CuriosityMutation) ResetContent() {
	m.content = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CuriosityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CuriosityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Curiosity entity.
// If the Curiosity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CuriosityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CuriosityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CuriosityMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CuriosityMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Curiosity entity.
// If the Curiosity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CuriosityMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CuriosityMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPetID sets the "pet" edge to the Pet entity by id.
func (m *CuriosityMutation) SetPetID(id uuid.UUID) {
	m.pet = &id
}

// ClearPet clears the "pet" edge to the Pet entity.
func (m *CuriosityMutation) ClearPet() {
	m.clearedpet = true
}

// PetCleared reports if the "pet" edge to the Pet entity was cleared.
func (m *CuriosityMutation) PetCleared() bool {
	return m.clearedpet
}

// PetID returns the "pet" edge ID in the mutation.
func (m *CuriosityMutation) PetID() (id uuid.UUID, exists bool) {
	if m.pet != nil {
		return *m.pet, true
	}
	return
}

// PetIDs returns the "pet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PetID instead. It exists only for internal usage by the builders.
func (m *CuriosityMutation) PetIDs() (ids []uuid.UUID) {
	if id := m.pet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPet resets all changes to the "pet" edge.
func (m *CuriosityMutation) ResetPet() {
	m.pet = nil
	m.clearedpet = false
}

// AddUserCuriosityIDs adds the "user_curiosities" edge to the UserCuriosity entity by ids.
func (m *CuriosityMutation) AddUserCuriosityIDs(ids ...uuid.UUID) {
	if m.user_curiosities == nil {
		m.user_curiosities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.user_curiosities[ids[i]] = struct{}{}
	}
}

// ClearUserCuriosities clears the "user_curiosities" edge to the UserCuriosity entity.
func (m *CuriosityMutation) ClearUserCuriosities() {
	m.cleareduser_curiosities = true
}

// UserCuriositiesCleared reports if the "user_curiosities" edge to the UserCuriosity entity was cleared.
func (m *CuriosityMutation) UserCuriositiesCleared() bool {
	return m.cleareduser_curiosities
}

// RemoveUserCuriosityIDs removes the "user_curiosities" edge to the UserCuriosity entity by IDs.
func (m *CuriosityMutation) RemoveUserCuriosityIDs(ids ...uuid.UUID) {
	if m.removeduser_curiosities == nil {
		m.removeduser_curiosities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.user_curiosities, ids[i])
		m.removeduser_curiosities[ids[i]] = struct{}{}
	}
}

// RemovedUserCuriosities returns the removed IDs of the "user_curiosities" edge to the UserCuriosity entity.
func (m *CuriosityMutation) RemovedUserCuriositiesIDs() (ids []uuid.UUID) {
	for id := range m.removeduser_curiosities {
		ids = append(ids, id)
	}
	return
}

// UserCuriositiesIDs returns the "user_curiosities" edge IDs in the mutation.
func (m *CuriosityMutation) UserCuriositiesIDs() (ids []uuid.UUID) {
	for id := range m.user_curiosities {
		ids = append(ids, id)
	}
	return
}

// ResetUserCuriosities resets all changes to the "user_curiosities" edge.
func (m *CuriosityMutation) ResetUserCuriosities() {
	m.user_curiosities = nil
	m.cleareduser_curiosities = false
	m.removeduser_curiosities = nil
}

// Where appends a list predicates to the CuriosityMutation builder.
func (m *CuriosityMutation) Where(ps ...predicate.Curiosity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CuriosityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CuriosityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Curiosity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CuriosityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CuriosityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Curiosity).
func (m *CuriosityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CuriosityMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.title != nil {
		fields = append(fields, curiosity.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, curiosity.FieldContent)
	}
	if m.created_at != nil {
		fields = append(fields, curiosity.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, curiosity.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CuriosityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case curiosity.FieldTitle:
		return m.Title()
	case curiosity.FieldContent:
		return m.Content()
	case curiosity.FieldCreatedAt:
		return m.CreatedAt()
	case curiosity.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CuriosityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case curiosity.FieldTitle:
		return m.OldTitle(ctx)
	case curiosity.FieldContent:
		return m.OldContent(ctx)
	case curiosity.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case curiosity.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Curiosity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CuriosityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case curiosity.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case curiosity.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case curiosity.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case curiosity.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Curiosity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CuriosityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CuriosityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CuriosityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Curiosity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CuriosityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CuriosityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CuriosityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Curiosity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CuriosityMutation) ResetField(name string) error {
	switch name {
	case curiosity.FieldTitle:
		m.ResetTitle()
		return nil
	case curiosity.FieldContent:
		m.ResetContent()
		return nil
	case curiosity.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case curiosity.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Curiosity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CuriosityMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.pet != nil {
		edges = append(edges, curiosity.EdgePet)
	}
	if m.user_curiosities != nil {
		edges = append(edges, curiosity.EdgeUserCuriosities)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CuriosityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case curiosity.EdgePet:
		if id := m.pet; id != nil {
			return []ent.Value{*id}
		}
	case curiosity.EdgeUserCuriosities:
		ids := make([]ent.Value, 0, len(m.user_curiosities))
		for id := range m.user_curiosities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CuriosityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser_curiosities != nil {
		edges = append(edges, curiosity.EdgeUserCuriosities)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CuriosityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case curiosity.EdgeUserCuriosities:
		ids := make([]ent.Value, 0, len(m.removeduser_curiosities))
		for id := range m.removeduser_curiosities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CuriosityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpet {
		edges = append(edges, curiosity.EdgePet)
	}
	if m.cleareduser_curiosities {
		edges = append(edges, curiosity.EdgeUserCuriosities)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CuriosityMutation) EdgeCleared(name string) bool {
	switch name {
	case curiosity.EdgePet:
		return m.clearedpet
	case curiosity.EdgeUserCuriosities:
		return m.cleareduser_curiosities
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CuriosityMutation) ClearEdge(name string) error {
	switch name {
	case curiosity.EdgePet:
		m.ClearPet()
		return nil
	}
	return fmt.Errorf("unknown Curiosity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CuriosityMutation) ResetEdge(name string) error {
	switch name {
	case curiosity.EdgePet:
		m.ResetPet()
		return nil
	case curiosity.EdgeUserCuriosities:
		m.ResetUserCuriosities()
		return nil
	}
	return fmt.Errorf("unknown Curiosity edge %s", name)
}

// PetMutation represents an operation that mutates the Pet nodes in the graph.
type PetMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	specie             *pet.Specie
	breed              *string
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	curiosities        map[uuid.UUID]struct{}
	removedcuriosities map[uuid.UUID]struct{}
	clearedcuriosities bool
	owners             map[uuid.UUID]struct{}
	removedowners      map[uuid.UUID]struct{}
	clearedowners      bool
	done               bool
	oldValue           func(context.Context) (*Pet, error)
	predicates         []predicate.Pet
}

var _ ent.Mutation = (*PetMutation)(nil)

// petOption allows management of the mutation configuration using functional options.
type petOption func(*PetMutation)

// newPetMutation creates new mutation for the Pet entity.
func newPetMutation(c config, op Op, opts ...petOption) *PetMutation {
	m := &PetMutation{
		config:        c,
		op:            op,
		typ:           TypePet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPetID sets the ID field of the mutation.
func withPetID(id uuid.UUID) petOption {
	return func(m *PetMutation) {
		var (
			err   error
			once  sync.Once
			value *Pet
		)
		m.oldValue = func(ctx context.Context) (*Pet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPet sets the old Pet of the mutation.
func withPet(node *Pet) petOption {
	return func(m *PetMutation) {
		m.oldValue = func(context.Context) (*Pet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Pet entities.
func (m *PetMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PetMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PetMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSpecie sets the "specie" field.
func (m *PetMutation) SetSpecie(pe pet.Specie) {
	m.specie = &pe
}

// Specie returns the value of the "specie" field in the mutation.
func (m *PetMutation) Specie() (r pet.Specie, exists bool) {
	v := m.specie
	if v == nil {
		return
	}
	return *v, true
}

// OldSpecie returns the old "specie" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldSpecie(ctx context.Context) (v pet.Specie, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpecie is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpecie requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpecie: %w", err)
	}
	return oldValue.Specie, nil
}

// ResetSpecie resets all changes to the "specie" field.
func (m *PetMutation) ResetSpecie() {
	m.specie = nil
}

// SetBreed sets the "breed" field.
func (m *PetMutation) SetBreed(s string) {
	m.breed = &s
}

// Breed returns the value of the "breed" field in the mutation.
func (m *PetMutation) Breed() (r string, exists bool) {
	v := m.breed
	if v == nil {
		return
	}
	return *v, true
}

// OldBreed returns the old "breed" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldBreed(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBreed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBreed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBreed: %w", err)
	}
	return oldValue.Breed, nil
}

// ResetBreed resets all changes to the "breed" field.
func (m *PetMutation) ResetBreed() {
	m.breed = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PetMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddCuriosityIDs adds the "curiosities" edge to the Curiosity entity by ids.
func (m *PetMutation) AddCuriosityIDs(ids ...uuid.UUID) {
	if m.curiosities == nil {
		m.curiosities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.curiosities[ids[i]] = struct{}{}
	}
}

// ClearCuriosities clears the "curiosities" edge to the Curiosity entity.
func (m *PetMutation) ClearCuriosities() {
	m.clearedcuriosities = true
}

// CuriositiesCleared reports if the "curiosities" edge to the Curiosity entity was cleared.
func (m *PetMutation) CuriositiesCleared() bool {
	return m.clearedcuriosities
}

// RemoveCuriosityIDs removes the "curiosities" edge to the Curiosity entity by IDs.
func (m *PetMutation) RemoveCuriosityIDs(ids ...uuid.UUID) {
	if m.removedcuriosities == nil {
		m.removedcuriosities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.curiosities, ids[i])
		m.removedcuriosities[ids[i]] = struct{}{}
	}
}

// RemovedCuriosities returns the removed IDs of the "curiosities" edge to the Curiosity entity.
func (m *PetMutation) RemovedCuriositiesIDs() (ids []uuid.UUID) {
	for id := range m.removedcuriosities {
		ids = append(ids, id)
	}
	return
}

// CuriositiesIDs returns the "curiosities" edge IDs in the mutation.
func (m *PetMutation) CuriositiesIDs() (ids []uuid.UUID) {
	for id := range m.curiosities {
		ids = append(ids, id)
	}
	return
}

// ResetCuriosities resets all changes to the "curiosities" edge.
func (m *PetMutation) ResetCuriosities() {
	m.curiosities = nil
	m.clearedcuriosities = false
	m.removedcuriosities = nil
}

// AddOwnerIDs adds the "owners" edge to the User entity by ids.
func (m *PetMutation) AddOwnerIDs(ids ...uuid.UUID) {
	if m.owners == nil {
		m.owners = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.owners[ids[i]] = struct{}{}
	}
}

// ClearOwners clears the "owners" edge to the User entity.
func (m *PetMutation) ClearOwners() {
	m.clearedowners = true
}

// OwnersCleared reports if the "owners" edge to the User entity was cleared.
func (m *PetMutation) OwnersCleared() bool {
	return m.clearedowners
}

// RemoveOwnerIDs removes the "owners" edge to the User entity by IDs.
func (m *PetMutation) RemoveOwnerIDs(ids ...uuid.UUID) {
	if m.removedowners == nil {
		m.removedowners = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.owners, ids[i])
		m.removedowners[ids[i]] = struct{}{}
	}
}

// RemovedOwners returns the removed IDs of the "owners" edge to the User entity.
func (m *PetMutation) RemovedOwnersIDs() (ids []uuid.UUID) {
	for id := range m.removedowners {
		ids = append(ids, id)
	}
	return
}

// OwnersIDs returns the "owners" edge IDs in the mutation.
func (m *PetMutation) OwnersIDs() (ids []uuid.UUID) {
	for id := range m.owners {
		ids = append(ids, id)
	}
	return
}

// ResetOwners resets all changes to the "owners" edge.
func (m *PetMutation) ResetOwners() {
	m.owners = nil
	m.clearedowners = false
	m.removedowners = nil
}

// Where appends a list predicates to the PetMutation builder.
func (m *PetMutation) Where(ps ...predicate.Pet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Pet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Pet).
func (m *PetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PetMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.specie != nil {
		fields = append(fields, pet.FieldSpecie)
	}
	if m.breed != nil {
		fields = append(fields, pet.FieldBreed)
	}
	if m.created_at != nil {
		fields = append(fields, pet.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, pet.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pet.FieldSpecie:
		return m.Specie()
	case pet.FieldBreed:
		return m.Breed()
	case pet.FieldCreatedAt:
		return m.CreatedAt()
	case pet.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pet.FieldSpecie:
		return m.OldSpecie(ctx)
	case pet.FieldBreed:
		return m.OldBreed(ctx)
	case pet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Pet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pet.FieldSpecie:
		v, ok := value.(pet.Specie)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpecie(v)
		return nil
	case pet.FieldBreed:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBreed(v)
		return nil
	case pet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Pet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Pet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PetMutation) ResetField(name string) error {
	switch name {
	case pet.FieldSpecie:
		m.ResetSpecie()
		return nil
	case pet.FieldBreed:
		m.ResetBreed()
		return nil
	case pet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PetMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.curiosities != nil {
		edges = append(edges, pet.EdgeCuriosities)
	}
	if m.owners != nil {
		edges = append(edges, pet.EdgeOwners)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pet.EdgeCuriosities:
		ids := make([]ent.Value, 0, len(m.curiosities))
		for id := range m.curiosities {
			ids = append(ids, id)
		}
		return ids
	case pet.EdgeOwners:
		ids := make([]ent.Value, 0, len(m.owners))
		for id := range m.owners {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcuriosities != nil {
		edges = append(edges, pet.EdgeCuriosities)
	}
	if m.removedowners != nil {
		edges = append(edges, pet.EdgeOwners)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case pet.EdgeCuriosities:
		ids := make([]ent.Value, 0, len(m.removedcuriosities))
		for id := range m.removedcuriosities {
			ids = append(ids, id)
		}
		return ids
	case pet.EdgeOwners:
		ids := make([]ent.Value, 0, len(m.removedowners))
		for id := range m.removedowners {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcuriosities {
		edges = append(edges, pet.EdgeCuriosities)
	}
	if m.clearedowners {
		edges = append(edges, pet.EdgeOwners)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PetMutation) EdgeCleared(name string) bool {
	switch name {
	case pet.EdgeCuriosities:
		return m.clearedcuriosities
	case pet.EdgeOwners:
		return m.clearedowners
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Pet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PetMutation) ResetEdge(name string) error {
	switch name {
	case pet.EdgeCuriosities:
		m.ResetCuriosities()
		return nil
	case pet.EdgeOwners:
		m.ResetOwners()
		return nil
	}
	return fmt.Errorf("unknown Pet edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	name                    *string
	email                   *string
	tier                    *user.Tier
	subscription_expires_at *time.Time
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	pets                    map[uuid.UUID]struct{}
	removedpets             map[uuid.UUID]struct{}
	clearedpets             bool
	user_curiosities        map[uuid.UUID]struct{}
	removeduser_curiosities map[uuid.UUID]struct{}
	cleareduser_curiosities bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetTier sets the "tier" field.
func (m *UserMutation) SetTier(u user.Tier) {
	m.tier = &u
}

// Tier returns the value of the "tier" field in the mutation.
func (m *UserMutation) Tier() (r user.Tier, exists bool) {
	v := m.tier
	if v == nil {
		return
	}
	return *v, true
}

// OldTier returns the old "tier" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTier(ctx context.Context) (v user.Tier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTier: %w", err)
	}
	return oldValue.Tier, nil
}

// ResetTier resets all changes to the "tier" field.
func (m *UserMutation) ResetTier() {
	m.tier = nil
}

// SetSubscriptionExpiresAt sets the "subscription_expires_at" field.
func (m *UserMutation) SetSubscriptionExpiresAt(t time.Time) {
	m.subscription_expires_at = &t
}

// SubscriptionExpiresAt returns the value of the "subscription_expires_at" field in the mutation.
func (m *UserMutation) SubscriptionExpiresAt() (r time.Time, exists bool) {
	v := m.subscription_expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscriptionExpiresAt returns the old "subscription_expires_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSubscriptionExpiresAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscriptionExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscriptionExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscriptionExpiresAt: %w", err)
	}
	return oldValue.SubscriptionExpiresAt, nil
}

// ClearSubscriptionExpiresAt clears the value of the "subscription_expires_at" field.
func (m *UserMutation) ClearSubscriptionExpiresAt() {
	m.subscription_expires_at = nil
	m.clearedFields[user.FieldSubscriptionExpiresAt] = struct{}{}
}

// SubscriptionExpiresAtCleared returns if the "subscription_expires_at" field was cleared in this mutation.
func (m *UserMutation) SubscriptionExpiresAtCleared() bool {
	_, ok := m.clearedFields[user.FieldSubscriptionExpiresAt]
	return ok
}

// ResetSubscriptionExpiresAt resets all changes to the "subscription_expires_at" field.
func (m *UserMutation) ResetSubscriptionExpiresAt() {
	m.subscription_expires_at = nil
	delete(m.clearedFields, user.FieldSubscriptionExpiresAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddPetIDs adds the "pets" edge to the Pet entity by ids.
func (m *UserMutation) AddPetIDs(ids ...uuid.UUID) {
	if m.pets == nil {
		m.pets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.pets[ids[i]] = struct{}{}
	}
}

// ClearPets clears the "pets" edge to the Pet entity.
func (m *UserMutation) ClearPets() {
	m.clearedpets = true
}

// PetsCleared reports if the "pets" edge to the Pet entity was cleared.
func (m *UserMutation) PetsCleared() bool {
	return m.clearedpets
}

// RemovePetIDs removes the "pets" edge to the Pet entity by IDs.
func (m *UserMutation) RemovePetIDs(ids ...uuid.UUID) {
	if m.removedpets == nil {
		m.removedpets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.pets, ids[i])
		m.removedpets[ids[i]] = struct{}{}
	}
}

// RemovedPets returns the removed IDs of the "pets" edge to the Pet entity.
func (m *UserMutation) RemovedPetsIDs() (ids []uuid.UUID) {
	for id := range m.removedpets {
		ids = append(ids, id)
	}
	return
}

// PetsIDs returns the "pets" edge IDs in the mutation.
func (m *UserMutation) PetsIDs() (ids []uuid.UUID) {
	for id := range m.pets {
		ids = append(ids, id)
	}
	return
}

// ResetPets resets all changes to the "pets" edge.
func (m *UserMutation) ResetPets() {
	m.pets = nil
	m.clearedpets = false
	m.removedpets = nil
}

// AddUserCuriosityIDs adds the "user_curiosities" edge to the UserCuriosity entity by ids.
func (m *UserMutation) AddUserCuriosityIDs(ids ...uuid.UUID) {
	if m.user_curiosities == nil {
		m.user_curiosities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.user_curiosities[ids[i]] = struct{}{}
	}
}

// ClearUserCuriosities clears the "user_curiosities" edge to the UserCuriosity entity.
func (m *UserMutation) ClearUserCuriosities() {
	m.cleareduser_curiosities = true
}

// UserCuriositiesCleared reports if the "user_curiosities" edge to the UserCuriosity entity was cleared.
func (m *UserMutation) UserCuriositiesCleared() bool {
	return m.cleareduser_curiosities
}

// RemoveUserCuriosityIDs removes the "user_curiosities" edge to the UserCuriosity entity by IDs.
func (m *UserMutation) RemoveUserCuriosityIDs(ids ...uuid.UUID) {
	if m.removeduser_curiosities == nil {
		m.removeduser_curiosities = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.user_curiosities, ids[i])
		m.removeduser_curiosities[ids[i]] = struct{}{}
	}
}

// RemovedUserCuriosities returns the removed IDs of the "user_curiosities" edge to the UserCuriosity entity.
func (m *UserMutation) RemovedUserCuriositiesIDs() (ids []uuid.UUID) {
	for id := range m.removeduser_curiosities {
		ids = append(ids, id)
	}
	return
}

// UserCuriositiesIDs returns the "user_curiosities" edge IDs in the mutation.
func (m *UserMutation) UserCuriositiesIDs() (ids []uuid.UUID) {
	for id := range m.user_curiosities {
		ids = append(ids, id)
	}
	return
}

// ResetUserCuriosities resets all changes to the "user_curiosities" edge.
func (m *UserMutation) ResetUserCuriosities() {
	m.user_curiosities = nil
	m.cleareduser_curiosities = false
	m.removeduser_curiosities = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.tier != nil {
		fields = append(fields, user.FieldTier)
	}
	if m.subscription_expires_at != nil {
		fields = append(fields, user.FieldSubscriptionExpiresAt)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldTier:
		return m.Tier()
	case user.FieldSubscriptionExpiresAt:
		return m.SubscriptionExpiresAt()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldTier:
		return m.OldTier(ctx)
	case user.FieldSubscriptionExpiresAt:
		return m.OldSubscriptionExpiresAt(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldTier:
		v, ok := value.(user.Tier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTier(v)
		return nil
	case user.FieldSubscriptionExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscriptionExpiresAt(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldSubscriptionExpiresAt) {
		fields = append(fields, user.FieldSubscriptionExpiresAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldSubscriptionExpiresAt:
		m.ClearSubscriptionExpiresAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldTier:
		m.ResetTier()
		return nil
	case user.FieldSubscriptionExpiresAt:
		m.ResetSubscriptionExpiresAt()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.pets != nil {
		edges = append(edges, user.EdgePets)
	}
	if m.user_curiosities != nil {
		edges = append(edges, user.EdgeUserCuriosities)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePets:
		ids := make([]ent.Value, 0, len(m.pets))
		for id := range m.pets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserCuriosities:
		ids := make([]ent.Value, 0, len(m.user_curiosities))
		for id := range m.user_curiosities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpets != nil {
		edges = append(edges, user.EdgePets)
	}
	if m.removeduser_curiosities != nil {
		edges = append(edges, user.EdgeUserCuriosities)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePets:
		ids := make([]ent.Value, 0, len(m.removedpets))
		for id := range m.removedpets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserCuriosities:
		ids := make([]ent.Value, 0, len(m.removeduser_curiosities))
		for id := range m.removeduser_curiosities {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpets {
		edges = append(edges, user.EdgePets)
	}
	if m.cleareduser_curiosities {
		edges = append(edges, user.EdgeUserCuriosities)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePets:
		return m.clearedpets
	case user.EdgeUserCuriosities:
		return m.cleareduser_curiosities
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePets:
		m.ResetPets()
		return nil
	case user.EdgeUserCuriosities:
		m.ResetUserCuriosities()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserCuriosityMutation represents an operation that mutates the UserCuriosity nodes in the graph.
type UserCuriosityMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	viewed           *bool
	liked            *bool
	created_at       *time.Time
	clearedFields    map[string]struct{}
	user             *uuid.UUID
	cleareduser      bool
	curiosity        *uuid.UUID
	clearedcuriosity bool
	done             bool
	oldValue         func(context.Context) (*UserCuriosity, error)
	predicates       []predicate.UserCuriosity
}

var _ ent.Mutation = (*UserCuriosityMutation)(nil)

// usercuriosityOption allows management of the mutation configuration using functional options.
type usercuriosityOption func(*UserCuriosityMutation)

// newUserCuriosityMutation creates new mutation for the UserCuriosity entity.
func newUserCuriosityMutation(c config, op Op, opts ...usercuriosityOption) *UserCuriosityMutation {
	m := &UserCuriosityMutation{
		config:        c,
		op:            op,
		typ:           TypeUserCuriosity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserCuriosityID sets the ID field of the mutation.
func withUserCuriosityID(id uuid.UUID) usercuriosityOption {
	return func(m *UserCuriosityMutation) {
		var (
			err   error
			once  sync.Once
			value *UserCuriosity
		)
		m.oldValue = func(ctx context.Context) (*UserCuriosity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserCuriosity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserCuriosity sets the old UserCuriosity of the mutation.
func withUserCuriosity(node *UserCuriosity) usercuriosityOption {
	return func(m *UserCuriosityMutation) {
		m.oldValue = func(context.Context) (*UserCuriosity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserCuriosityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserCuriosityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserCuriosity entities.
func (m *UserCuriosityMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserCuriosityMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserCuriosityMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserCuriosity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetViewed sets the "viewed" field.
func (m *UserCuriosityMutation) SetViewed(b bool) {
	m.viewed = &b
}

// Viewed returns the value of the "viewed" field in the mutation.
func (m *UserCuriosityMutation) Viewed() (r bool, exists bool) {
	v := m.viewed
	if v == nil {
		return
	}
	return *v, true
}

// OldViewed returns the old "viewed" field's value of the UserCuriosity entity.
// If the UserCuriosity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCuriosityMutation) OldViewed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViewed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViewed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViewed: %w", err)
	}
	return oldValue.Viewed, nil
}

// ResetViewed resets all changes to the "viewed" field.
func (m *UserCuriosityMutation) ResetViewed() {
	m.viewed = nil
}

// SetLiked sets the "liked" field.
func (m *UserCuriosityMutation) SetLiked(b bool) {
	m.liked = &b
}

// Liked returns the value of the "liked" field in the mutation.
func (m *UserCuriosityMutation) Liked() (r bool, exists bool) {
	v := m.liked
	if v == nil {
		return
	}
	return *v, true
}

// OldLiked returns the old "liked" field's value of the UserCuriosity entity.
// If the UserCuriosity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCuriosityMutation) OldLiked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiked: %w", err)
	}
	return oldValue.Liked, nil
}

// ResetLiked resets all changes to the "liked" field.
func (m *UserCuriosityMutation) ResetLiked() {
	m.liked = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserCuriosityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserCuriosityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserCuriosity entity.
// If the UserCuriosity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserCuriosityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserCuriosityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *UserCuriosityMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserCuriosityMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserCuriosityMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *UserCuriosityMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserCuriosityMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserCuriosityMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetCuriosityID sets the "curiosity" edge to the Curiosity entity by id.
func (m *UserCuriosityMutation) SetCuriosityID(id uuid.UUID) {
	m.curiosity = &id
}

// ClearCuriosity clears the "curiosity" edge to the Curiosity entity.
func (m *UserCuriosityMutation) ClearCuriosity() {
	m.clearedcuriosity = true
}

// CuriosityCleared reports if the "curiosity" edge to the Curiosity entity was cleared.
func (m *UserCuriosityMutation) CuriosityCleared() bool {
	return m.clearedcuriosity
}

// CuriosityID returns the "curiosity" edge ID in the mutation.
func (m *UserCuriosityMutation) CuriosityID() (id uuid.UUID, exists bool) {
	if m.curiosity != nil {
		return *m.curiosity, true
	}
	return
}

// CuriosityIDs returns the "curiosity" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CuriosityID instead. It exists only for internal usage by the builders.
func (m *UserCuriosityMutation) CuriosityIDs() (ids []uuid.UUID) {
	if id := m.curiosity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCuriosity resets all changes to the "curiosity" edge.
func (m *UserCuriosityMutation) ResetCuriosity() {
	m.curiosity = nil
	m.clearedcuriosity = false
}

// Where appends a list predicates to the UserCuriosityMutation builder.
func (m *UserCuriosityMutation) Where(ps ...predicate.UserCuriosity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserCuriosityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserCuriosityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserCuriosity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserCuriosityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserCuriosityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserCuriosity).
func (m *UserCuriosityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserCuriosityMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.viewed != nil {
		fields = append(fields, usercuriosity.FieldViewed)
	}
	if m.liked != nil {
		fields = append(fields, usercuriosity.FieldLiked)
	}
	if m.created_at != nil {
		fields = append(fields, usercuriosity.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserCuriosityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usercuriosity.FieldViewed:
		return m.Viewed()
	case usercuriosity.FieldLiked:
		return m.Liked()
	case usercuriosity.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserCuriosityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usercuriosity.FieldViewed:
		return m.OldViewed(ctx)
	case usercuriosity.FieldLiked:
		return m.OldLiked(ctx)
	case usercuriosity.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserCuriosity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCuriosityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usercuriosity.FieldViewed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViewed(v)
		return nil
	case usercuriosity.FieldLiked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiked(v)
		return nil
	case usercuriosity.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserCuriosity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserCuriosityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserCuriosityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserCuriosityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserCuriosity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserCuriosityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserCuriosityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserCuriosityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserCuriosity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserCuriosityMutation) ResetField(name string) error {
	switch name {
	case usercuriosity.FieldViewed:
		m.ResetViewed()
		return nil
	case usercuriosity.FieldLiked:
		m.ResetLiked()
		return nil
	case usercuriosity.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserCuriosity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserCuriosityMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, usercuriosity.EdgeUser)
	}
	if m.curiosity != nil {
		edges = append(edges, usercuriosity.EdgeCuriosity)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserCuriosityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usercuriosity.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case usercuriosity.EdgeCuriosity:
		if id := m.curiosity; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserCuriosityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserCuriosityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserCuriosityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, usercuriosity.EdgeUser)
	}
	if m.clearedcuriosity {
		edges = append(edges, usercuriosity.EdgeCuriosity)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserCuriosityMutation) EdgeCleared(name string) bool {
	switch name {
	case usercuriosity.EdgeUser:
		return m.cleareduser
	case usercuriosity.EdgeCuriosity:
		return m.clearedcuriosity
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserCuriosityMutation) ClearEdge(name string) error {
	switch name {
	case usercuriosity.EdgeUser:
		m.ClearUser()
		return nil
	case usercuriosity.EdgeCuriosity:
		m.ClearCuriosity()
		return nil
	}
	return fmt.Errorf("unknown UserCuriosity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserCuriosityMutation) ResetEdge(name string) error {
	switch name {
	case usercuriosity.EdgeUser:
		m.ResetUser()
		return nil
	case usercuriosity.EdgeCuriosity:
		m.ResetCuriosity()
		return nil
	}
	return fmt.Errorf("unknown UserCuriosity edge %s", name)
}
