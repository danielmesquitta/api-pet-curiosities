// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/curiosity"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/pet"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/predicate"
	"github.com/danielmesquitta/api-pet-curiosities/internal/provider/db/ent/user"
	"github.com/google/uuid"
)

// PetUpdate is the builder for updating Pet entities.
type PetUpdate struct {
	config
	hooks    []Hook
	mutation *PetMutation
}

// Where appends a list predicates to the PetUpdate builder.
func (pu *PetUpdate) Where(ps ...predicate.Pet) *PetUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetSpecie sets the "specie" field.
func (pu *PetUpdate) SetSpecie(pe pet.Specie) *PetUpdate {
	pu.mutation.SetSpecie(pe)
	return pu
}

// SetNillableSpecie sets the "specie" field if the given value is not nil.
func (pu *PetUpdate) SetNillableSpecie(pe *pet.Specie) *PetUpdate {
	if pe != nil {
		pu.SetSpecie(*pe)
	}
	return pu
}

// SetBreed sets the "breed" field.
func (pu *PetUpdate) SetBreed(s string) *PetUpdate {
	pu.mutation.SetBreed(s)
	return pu
}

// SetNillableBreed sets the "breed" field if the given value is not nil.
func (pu *PetUpdate) SetNillableBreed(s *string) *PetUpdate {
	if s != nil {
		pu.SetBreed(*s)
	}
	return pu
}

// SetSearch sets the "search" field.
func (pu *PetUpdate) SetSearch(s string) *PetUpdate {
	pu.mutation.SetSearch(s)
	return pu
}

// SetNillableSearch sets the "search" field if the given value is not nil.
func (pu *PetUpdate) SetNillableSearch(s *string) *PetUpdate {
	if s != nil {
		pu.SetSearch(*s)
	}
	return pu
}

// SetUpdatedAt sets the "updatedAt" field.
func (pu *PetUpdate) SetUpdatedAt(t time.Time) *PetUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// AddCuriosityIDs adds the "curiosities" edge to the Curiosity entity by IDs.
func (pu *PetUpdate) AddCuriosityIDs(ids ...uuid.UUID) *PetUpdate {
	pu.mutation.AddCuriosityIDs(ids...)
	return pu
}

// AddCuriosities adds the "curiosities" edges to the Curiosity entity.
func (pu *PetUpdate) AddCuriosities(c ...*Curiosity) *PetUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCuriosityIDs(ids...)
}

// AddOwnerIDs adds the "owners" edge to the User entity by IDs.
func (pu *PetUpdate) AddOwnerIDs(ids ...uuid.UUID) *PetUpdate {
	pu.mutation.AddOwnerIDs(ids...)
	return pu
}

// AddOwners adds the "owners" edges to the User entity.
func (pu *PetUpdate) AddOwners(u ...*User) *PetUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddOwnerIDs(ids...)
}

// Mutation returns the PetMutation object of the builder.
func (pu *PetUpdate) Mutation() *PetMutation {
	return pu.mutation
}

// ClearCuriosities clears all "curiosities" edges to the Curiosity entity.
func (pu *PetUpdate) ClearCuriosities() *PetUpdate {
	pu.mutation.ClearCuriosities()
	return pu
}

// RemoveCuriosityIDs removes the "curiosities" edge to Curiosity entities by IDs.
func (pu *PetUpdate) RemoveCuriosityIDs(ids ...uuid.UUID) *PetUpdate {
	pu.mutation.RemoveCuriosityIDs(ids...)
	return pu
}

// RemoveCuriosities removes "curiosities" edges to Curiosity entities.
func (pu *PetUpdate) RemoveCuriosities(c ...*Curiosity) *PetUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCuriosityIDs(ids...)
}

// ClearOwners clears all "owners" edges to the User entity.
func (pu *PetUpdate) ClearOwners() *PetUpdate {
	pu.mutation.ClearOwners()
	return pu
}

// RemoveOwnerIDs removes the "owners" edge to User entities by IDs.
func (pu *PetUpdate) RemoveOwnerIDs(ids ...uuid.UUID) *PetUpdate {
	pu.mutation.RemoveOwnerIDs(ids...)
	return pu
}

// RemoveOwners removes "owners" edges to User entities.
func (pu *PetUpdate) RemoveOwners(u ...*User) *PetUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveOwnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PetUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PetUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := pet.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PetUpdate) check() error {
	if v, ok := pu.mutation.Specie(); ok {
		if err := pet.SpecieValidator(v); err != nil {
			return &ValidationError{Name: "specie", err: fmt.Errorf(`ent: validator failed for field "Pet.specie": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Breed(); ok {
		if err := pet.BreedValidator(v); err != nil {
			return &ValidationError{Name: "breed", err: fmt.Errorf(`ent: validator failed for field "Pet.breed": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Search(); ok {
		if err := pet.SearchValidator(v); err != nil {
			return &ValidationError{Name: "search", err: fmt.Errorf(`ent: validator failed for field "Pet.search": %w`, err)}
		}
	}
	return nil
}

func (pu *PetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pet.Table, pet.Columns, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Specie(); ok {
		_spec.SetField(pet.FieldSpecie, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Breed(); ok {
		_spec.SetField(pet.FieldBreed, field.TypeString, value)
	}
	if value, ok := pu.mutation.Search(); ok {
		_spec.SetField(pet.FieldSearch, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(pet.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.CuriositiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pet.CuriositiesTable,
			Columns: []string{pet.CuriositiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCuriositiesIDs(); len(nodes) > 0 && !pu.mutation.CuriositiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pet.CuriositiesTable,
			Columns: []string{pet.CuriositiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CuriositiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pet.CuriositiesTable,
			Columns: []string{pet.CuriositiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pet.OwnersTable,
			Columns: pet.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOwnersIDs(); len(nodes) > 0 && !pu.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pet.OwnersTable,
			Columns: pet.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pet.OwnersTable,
			Columns: pet.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PetUpdateOne is the builder for updating a single Pet entity.
type PetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PetMutation
}

// SetSpecie sets the "specie" field.
func (puo *PetUpdateOne) SetSpecie(pe pet.Specie) *PetUpdateOne {
	puo.mutation.SetSpecie(pe)
	return puo
}

// SetNillableSpecie sets the "specie" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableSpecie(pe *pet.Specie) *PetUpdateOne {
	if pe != nil {
		puo.SetSpecie(*pe)
	}
	return puo
}

// SetBreed sets the "breed" field.
func (puo *PetUpdateOne) SetBreed(s string) *PetUpdateOne {
	puo.mutation.SetBreed(s)
	return puo
}

// SetNillableBreed sets the "breed" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableBreed(s *string) *PetUpdateOne {
	if s != nil {
		puo.SetBreed(*s)
	}
	return puo
}

// SetSearch sets the "search" field.
func (puo *PetUpdateOne) SetSearch(s string) *PetUpdateOne {
	puo.mutation.SetSearch(s)
	return puo
}

// SetNillableSearch sets the "search" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableSearch(s *string) *PetUpdateOne {
	if s != nil {
		puo.SetSearch(*s)
	}
	return puo
}

// SetUpdatedAt sets the "updatedAt" field.
func (puo *PetUpdateOne) SetUpdatedAt(t time.Time) *PetUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// AddCuriosityIDs adds the "curiosities" edge to the Curiosity entity by IDs.
func (puo *PetUpdateOne) AddCuriosityIDs(ids ...uuid.UUID) *PetUpdateOne {
	puo.mutation.AddCuriosityIDs(ids...)
	return puo
}

// AddCuriosities adds the "curiosities" edges to the Curiosity entity.
func (puo *PetUpdateOne) AddCuriosities(c ...*Curiosity) *PetUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCuriosityIDs(ids...)
}

// AddOwnerIDs adds the "owners" edge to the User entity by IDs.
func (puo *PetUpdateOne) AddOwnerIDs(ids ...uuid.UUID) *PetUpdateOne {
	puo.mutation.AddOwnerIDs(ids...)
	return puo
}

// AddOwners adds the "owners" edges to the User entity.
func (puo *PetUpdateOne) AddOwners(u ...*User) *PetUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddOwnerIDs(ids...)
}

// Mutation returns the PetMutation object of the builder.
func (puo *PetUpdateOne) Mutation() *PetMutation {
	return puo.mutation
}

// ClearCuriosities clears all "curiosities" edges to the Curiosity entity.
func (puo *PetUpdateOne) ClearCuriosities() *PetUpdateOne {
	puo.mutation.ClearCuriosities()
	return puo
}

// RemoveCuriosityIDs removes the "curiosities" edge to Curiosity entities by IDs.
func (puo *PetUpdateOne) RemoveCuriosityIDs(ids ...uuid.UUID) *PetUpdateOne {
	puo.mutation.RemoveCuriosityIDs(ids...)
	return puo
}

// RemoveCuriosities removes "curiosities" edges to Curiosity entities.
func (puo *PetUpdateOne) RemoveCuriosities(c ...*Curiosity) *PetUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCuriosityIDs(ids...)
}

// ClearOwners clears all "owners" edges to the User entity.
func (puo *PetUpdateOne) ClearOwners() *PetUpdateOne {
	puo.mutation.ClearOwners()
	return puo
}

// RemoveOwnerIDs removes the "owners" edge to User entities by IDs.
func (puo *PetUpdateOne) RemoveOwnerIDs(ids ...uuid.UUID) *PetUpdateOne {
	puo.mutation.RemoveOwnerIDs(ids...)
	return puo
}

// RemoveOwners removes "owners" edges to User entities.
func (puo *PetUpdateOne) RemoveOwners(u ...*User) *PetUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveOwnerIDs(ids...)
}

// Where appends a list predicates to the PetUpdate builder.
func (puo *PetUpdateOne) Where(ps ...predicate.Pet) *PetUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PetUpdateOne) Select(field string, fields ...string) *PetUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pet entity.
func (puo *PetUpdateOne) Save(ctx context.Context) (*Pet, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PetUpdateOne) SaveX(ctx context.Context) *Pet {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PetUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := pet.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PetUpdateOne) check() error {
	if v, ok := puo.mutation.Specie(); ok {
		if err := pet.SpecieValidator(v); err != nil {
			return &ValidationError{Name: "specie", err: fmt.Errorf(`ent: validator failed for field "Pet.specie": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Breed(); ok {
		if err := pet.BreedValidator(v); err != nil {
			return &ValidationError{Name: "breed", err: fmt.Errorf(`ent: validator failed for field "Pet.breed": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Search(); ok {
		if err := pet.SearchValidator(v); err != nil {
			return &ValidationError{Name: "search", err: fmt.Errorf(`ent: validator failed for field "Pet.search": %w`, err)}
		}
	}
	return nil
}

func (puo *PetUpdateOne) sqlSave(ctx context.Context) (_node *Pet, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pet.Table, pet.Columns, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pet.FieldID)
		for _, f := range fields {
			if !pet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Specie(); ok {
		_spec.SetField(pet.FieldSpecie, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Breed(); ok {
		_spec.SetField(pet.FieldBreed, field.TypeString, value)
	}
	if value, ok := puo.mutation.Search(); ok {
		_spec.SetField(pet.FieldSearch, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(pet.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.CuriositiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pet.CuriositiesTable,
			Columns: []string{pet.CuriositiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCuriositiesIDs(); len(nodes) > 0 && !puo.mutation.CuriositiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pet.CuriositiesTable,
			Columns: []string{pet.CuriositiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CuriositiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   pet.CuriositiesTable,
			Columns: []string{pet.CuriositiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(curiosity.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pet.OwnersTable,
			Columns: pet.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOwnersIDs(); len(nodes) > 0 && !puo.mutation.OwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pet.OwnersTable,
			Columns: pet.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   pet.OwnersTable,
			Columns: pet.OwnersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pet{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
